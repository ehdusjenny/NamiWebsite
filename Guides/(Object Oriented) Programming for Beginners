(Object Oriented) Programming for Babbies
30-Minutes
What is a programming language? Programming language is a human-friendly language designed to communicate with machines and give machines instructions.
There are many types of programming languages out there, and for this tutorial we'll be covering an Object Oriented Language - Java.

Topics to cover: Introduction to objects, Inhertance, polymorphism.

An object in an OOP paradigm, in the most abstract definition, is a representation of anything that has a state and behaviour. So an object can be a dog, a dog is happy, sad, excited, etc, and the dog can run, jump, bite, etc.

<Create a little Java app that shows images of dogs doing things corresponding to the function>

So you can create a dog object and do all kinds of dog things.

The blueprint that defines what an object can do is called a class.


Inheritance
A class can inherit attributes and functions from another class.
<Animal superclass with animal specific functions (emotion and bite)>
<Change dog class to have only dog specific functions, inheriting the animal superclass attributes and functions>

Not all animals can run or jump, so let's leave that function only for dogs.

Let's look at a different example.
<Student class extending a Person class>
Within the university context, a person is either a staff member or a student. A student is a person, so a Student class inherits everything from the Person class. You can see inheritance as an IS-A relationship. Everyone has an ID associated with them, so that belongs to the Person class. Students can take courses, a staff cannot. So course-taking functionality only belongs to the Student class.

Inheritance in action:
	Both students and staff members can be granted access to rooms. So it makes sense to add that functionality to the Person class.
	<Example code + calling the method as both objects>


Polymorphism
In Java, there is another type called interfaces. Interfaces can contain constants and method signatures, but not the actual implementation.
<Show interface example Shape, with Circle and Square implementing it>
Circle and Square implements Shape, which means Circle and Square has to implement the methods defined by the Shape class. It also inherits the constants.

A function that can take in a superclass as input parameter.